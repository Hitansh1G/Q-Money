
plugins {
    id 'java'
    id 'maven-publish'
}

ext {
    buildId = System.currentTimeMillis()
}

buildDir = '/tmp/external_build'
    

version '1.0-SNAPSHOT'

sourceCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, "__CRIO__/pre-push")
    into { new File(rootProject.rootDir, ".git/hooks") }
    fileMode 0777
}


allprojects {
    buildDir = '/tmp/external_build'
}

subprojects {
    apply plugin: "java-library"

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    test {
        reports {
            junitXml.enabled = true
            def destinationDirectory = System.getProperty("user.home") + "/.gradle/daemon/${buildId}/test-results"
            junitXml.destination = file(destinationDirectory)
            html.enabled = true
        }
        useJUnitPlatform {
        }
        testLogging.events ("STANDARD_ERROR")
        testLogging.events ("STANDARD_OUT")
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTEST RESULT: ${result.resultType}"
                println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
                        "${result.successfulTestCount} SUCCEEDED, " +
                        "${result.failedTestCount} FAILED, " +
                        "${result.skippedTestCount} SKIPPED"
            }
        }
    }

    task installGitHooks(type: Copy) {
        from new File(rootProject.rootDir, '__CRIO__/pre-push')
        into { new File(rootProject.rootDir, '.git/hooks') }
        fileMode 0777
    }

    build.dependsOn installGitHooks
}

compileJava.dependsOn clean


task cleanupCrioJars {
    doLast {
        def userHome = System.properties['user.home']
        def mavenDir = new File(userHome, '.m2/repository/com/crio/')

        if (mavenDir.exists()) {
            delete mavenDir
        }
    }
}

task verifyMavenJarsCreated {
    dependsOn cleanupCrioJars
    dependsOn publishToMavenLocal
    doLast {
        def userHome = System.properties['user.home']
        def mavenDir = new File(userHome, '.m2/repository/com/crio/warmup/annual-return/1.0.0')

        if (!mavenDir.exists()) {
            throw new Exception("maven repository directory not created")
        }

        // Then, Check if the file exists.
        def jarFile = new File(mavenDir, 'annual-return-1.0.0.jar')
        def pomFile = new File(mavenDir, 'annual-return-1.0.0.pom')

        if (!jarFile.exists() || !pomFile.exists()) {
            throw new Exception("maven repository directory exists, but files do not exist")
        }

        println("All Maven repository files are created and in place")
    }
}

